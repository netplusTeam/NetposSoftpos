Index: app/src/main/java/com/woleapp/netpos/contactless/util/Mappers.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.woleapp.netpos.contactless.util\n\nimport com.danbamitale.epmslib.entities.TransactionResponse\nimport com.danbamitale.epmslib.entities.TransactionType\nimport com.danbamitale.epmslib.extensions.maskPan\nimport com.danbamitale.epmslib.utils.IsoAccountType\nimport com.woleapp.netpos.contactless.model.*\nimport com.woleapp.netpos.contactless.util.RandomPurposeUtil.dateStr2Long\nimport com.woleapp.netpos.contactless.util.RandomPurposeUtil.getCurrentDateTime\nimport com.woleapp.netpos.contactless.util.RandomPurposeUtil.getUniqueIdForFW\n\nobject Mappers {\n    fun mapQrTransToNormalTransRespType(qrTrans: QrTransactionResponseFinalModel) =\n        TransactionResponse().apply {\n            this.otherId =\n                qrTrans.message\n                    ?: \"\" // Since response message can not be set because it is a val from the sdk, hence i used other id to represent response message here\n            transactionType = qrTrans.transactionType\n            maskedPan = \"\"\n            amount = qrTrans.amount\n            transmissionDateTime = qrTrans.transmissionDateTime\n            STAN = qrTrans.transIdStan\n            RRN = qrTrans.rrnOrderId\n            responseCode = qrTrans.responseCode\n            cardLabel = qrTrans.cardLabel\n            cardHolder = qrTrans.cardHolder\n            transactionTimeInMillis = qrTrans.transactionTimeInMillis\n            accountType = qrTrans.accountType\n            terminalId = qrTrans.terminalId\n            merchantId = qrTrans.merchantId\n        }\n\n    fun TransactionResponse.mapTransactionResponseToQrTransaction() =\n        QrTransactionResponseFinalModel(\n            amount = this.amount,\n            responseCode = this.responseCode,\n            currency_code = \"NGN\",\n            customerName = this.cardHolder,\n            email = \"\",\n            message = this.otherId,\n            narration = this.otherId,\n            rrnOrderId = this.RRN,\n            result = this.otherId,\n            status = if (this.responseCode == \"00\") \"APPROVED\" else \"DECLINED\",\n            transIdStan = this.STAN,\n            transmissionDateTime = this.transmissionDateTime,\n            transactionTimeInMillis = this.transactionTimeInMillis,\n            transactionType = this.transactionType,\n            terminalId = this.terminalId,\n            merchantId = this.merchantId,\n        )\n\n    fun FirebaseNotificationModelResponse.mapToTransactionResponse(): TransactionResponse {\n        val currentDateTime = getCurrentDateTime()\n        return TransactionResponse().apply {\n            transactionType = TransactionType.PURCHASE\n            maskedPan = this@mapToTransactionResponse.maskedPan\n            amount = this@mapToTransactionResponse.amount.toDouble().toLong()\n            transmissionDateTime = currentDateTime\n            STAN = \"\"\n            RRN = this@mapToTransactionResponse.rrn\n            responseCode = this@mapToTransactionResponse.code\n            cardLabel = \"\"\n            cardHolder = this@mapToTransactionResponse.customerName\n            transactionTimeInMillis = dateStr2Long(currentDateTime, \"yyyy-MM-dd hh:mm a\")\n            accountType = IsoAccountType.DEFAULT_UNSPECIFIED\n            terminalId = this@mapToTransactionResponse.terminalId\n            merchantId = this@mapToTransactionResponse.merchantId\n        }\n    }\n\n    fun FWTransactionResponse.toTransactionResponse(): TransactionResponse {\n        val currentDateTime = getCurrentDateTime()\n        return TransactionResponse().apply {\n            transactionType = TransactionType.PURCHASE\n            maskedPan = this@toTransactionResponse.cardPan.maskPan()\n            amount = this@toTransactionResponse.amount.toDouble().toLong()\n            transmissionDateTime = currentDateTime\n            STAN = this@toTransactionResponse.stan\n            RRN = this@toTransactionResponse.rrn\n            responseCode = if(this@toTransactionResponse.responseCode == \"99\") \"06\" else this@toTransactionResponse.responseCode\n            cardLabel = \"\"\n            cardHolder = \"CUSTOMER\"\n            transactionTimeInMillis = dateStr2Long(currentDateTime, \"yyyy-MM-dd hh:mm a\")\n            accountType = IsoAccountType.DEFAULT_UNSPECIFIED\n            terminalId = this@toTransactionResponse.terminalId\n            merchantId = this@toTransactionResponse.uniqueID\n            this.responseMessage = this@toTransactionResponse.responseMessage\n        }\n    }\n\n    fun FlutterWaveClientDataEntity.toDomain(): FlutterWaveClientDataDomain =\n        with(this) {\n            FlutterWaveClientDataDomain(\n                clientId,\n                clientSecret,\n                merchantId,\n                terminalId,\n                merchantName,\n                merchantAddress,\n                merchantType,\n            )\n        }\n\n    fun FlutterWaveAuthClientDataEntity.toDomain(): FlutterWaveAuthClientDataDomain =\n        with(this) {\n            FlutterWaveAuthClientDataDomain(\n                clientId,\n                token,\n            )\n        }\n\n    fun FlutterWaveCheckTransactionStatusResponseEntity.toDomain(): FlutterWaveCheckTransactionStatusResponseDomain =\n        FlutterWaveCheckTransactionStatusResponseDomain(\n            amount,\n            authCode,\n            cardPan,\n            host,\n            isFinal,\n            responseCode,\n            responseMessage,\n            rrn,\n            stan,\n            terminalId,\n            uniqueID,\n        )\n\n    fun FWKeyHolder.toDomain(): FWKeyHolderDomain =\n        FWKeyHolderDomain(\n            refId,\n            secretKey,\n            terminalId,\n        )\n\n    fun ICCCardHelper.toFWTransactionRequest(\n        amount: String,\n        mId: String,\n        stan: String,\n        rrn: String,\n        terminalId: String,\n        refId: String,\n    ): FWTransactionRequest =\n        FWTransactionRequest(\n            amount = amount,\n            cardAid = getCardAid(this.cardScheme!!),\n            cardExpiryDate = this.cardData!!.expiryDate,\n            cardPan = this.cardData!!.pan,\n            cardSequenceNumber = this.cardData!!.panSequenceNumber,\n            clearPin = this.cardData!!.pinBlock!!, // ClearPin is the same value as PinBlock\n            iccData = this.cardData!!.nibssIccSubset,\n            merchantId = mId,\n            pinBlock = this.cardData!!.pinBlock!!,\n            posEntryMode = this.cardData!!.posEntryMode,\n            refId = refId,\n            stan = stan,\n            terminalId = terminalId,\n            track2Data = this.cardData!!.track2Data,\n            transactionRRN = rrn,\n            uniqueID = getUniqueIdForFW(),\n        )\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/woleapp/netpos/contactless/util/Mappers.kt b/app/src/main/java/com/woleapp/netpos/contactless/util/Mappers.kt
--- a/app/src/main/java/com/woleapp/netpos/contactless/util/Mappers.kt	
+++ b/app/src/main/java/com/woleapp/netpos/contactless/util/Mappers.kt	
@@ -8,6 +8,7 @@
 import com.woleapp.netpos.contactless.util.RandomPurposeUtil.dateStr2Long
 import com.woleapp.netpos.contactless.util.RandomPurposeUtil.getCurrentDateTime
 import com.woleapp.netpos.contactless.util.RandomPurposeUtil.getUniqueIdForFW
+import timber.log.Timber
 
 object Mappers {
     fun mapQrTransToNormalTransRespType(qrTrans: QrTransactionResponseFinalModel) =
@@ -72,6 +73,7 @@
     fun FWTransactionResponse.toTransactionResponse(): TransactionResponse {
         val currentDateTime = getCurrentDateTime()
         return TransactionResponse().apply {
+            Timber.tag("FWZLog").d(this@toTransactionResponse.responseMessage)
             transactionType = TransactionType.PURCHASE
             maskedPan = this@toTransactionResponse.cardPan.maskPan()
             amount = this@toTransactionResponse.amount.toDouble().toLong()
Index: app/src/main/java/com/woleapp/netpos/contactless/network/FwRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.woleapp.netpos.contactless.network\n\nimport com.danbamitale.epmslib.entities.TransactionResponse\nimport com.google.gson.Gson\nimport com.woleapp.netpos.contactless.domain.implementations.SharedPrefsManager\nimport com.woleapp.netpos.contactless.model.* // ktlint-disable no-wildcard-imports\nimport com.woleapp.netpos.contactless.util.AppConstants.FWKey_CLIENT_DATA_TAG\nimport com.woleapp.netpos.contactless.util.AppConstants.FWKey_CLIENT_TOKEN_TAG\nimport com.woleapp.netpos.contactless.util.AppConstants.FWKey_HOLDER_TAG\nimport com.woleapp.netpos.contactless.util.Mappers.toDomain\nimport com.woleapp.netpos.contactless.util.Mappers.toTransactionResponse\nimport io.reactivex.Single\nimport retrofit2.Response\nimport javax.inject.Inject\nimport javax.inject.Singleton\n\n@Singleton\nclass FwRepositoryImpl @Inject constructor(\n    private val apiService: FWApiService,\n    private val sharedPrefsManager: SharedPrefsManager,\n    private val gson: Gson,\n) : FwRepository {\n    override fun signUp(signUpRequestModel: SignUpRequestModel): Single<FlutterWaveClientDataDomain?> =\n        apiService.signUp(signUpRequestModel).flatMap {\n            Single.just(\n                if (it.isSuccessful) {\n                    sharedPrefsManager.saveString(\n                        FWKey_CLIENT_DATA_TAG,\n                        gson.toJson(it.body()!!.data),\n                    )\n                    it.body()!!.data.toDomain()\n                } else {\n                    null\n                },\n            )\n        }\n\n    override fun authenticate(authenticationRequest: FlutterWaveAuthenticationRequest): Single<FlutterWaveAuthClientDataDomain> =\n        apiService.authenticate(authenticationRequest).flatMap {\n            Single.just(\n                if (it.isSuccessful) {\n                    sharedPrefsManager.saveString(\n                        FWKey_CLIENT_TOKEN_TAG,\n                        gson.toJson(it.body()!!.data.token),\n                    )\n                    it.body()!!.data.toDomain()\n                } else {\n                    null\n                },\n            )\n        }\n\n    override fun getMerchantDetails(merchantId: String): Single<Response<FlutterWaveMerchantDetails>> =\n        apiService.getMerchantDetails(merchantId)\n\n    override fun processTransaction(fwTransactionRequest: FWTransactionRequest): Single<TransactionResponse> =\n        apiService.processTransaction(fwTransactionRequest)\n            .flatMap {\n                Single.just(it.toTransactionResponse())\n            }\n\n    override fun checkTransactionStatus(\n        checkTransactionStatusRequest: FlutterWaveCheckTransactionStatusRequest,\n    ): Single<Response<FlutterWaveCheckTransactionStatusResponseDomain>> =\n        apiService.checkTransactionStatus(checkTransactionStatusRequest).flatMap {\n            if (it.isSuccessful) {\n                Single.just(\n                    Response.success(it.body()!!.toDomain()),\n                )\n            } else {\n                Single.just(\n                    Response.error(400, null),\n                )\n            }\n        }\n\n    override fun generateKey(generateKeyRequest: FWKeyGenerationRequest): Single<FWKeyHolderDomain> =\n        apiService.generateKey(generateKeyRequest).flatMap {\n            if (it.isSuccessful) {\n                sharedPrefsManager.saveString(FWKey_HOLDER_TAG, gson.toJson(it.body()!!.data))\n                Single.just(\n                    it.body()!!.data.toDomain(),\n                )\n            } else {\n                Single.just(\n                    null,\n                )\n            }\n        }\n\n    override fun performFwSetUp(): Single<FWKeyHolderDomain> =\n        signUp(SignUpRequestModel(\"22323ZYC\", \"2201117TG\"))\n            .flatMap { clientData ->\n                authenticate(\n                    FlutterWaveAuthenticationRequest(\n                        clientData.clientId,\n                        clientData.clientSecret,\n                    ),\n                )\n                    .flatMap {\n                        generateKey(\n                            FWKeyGenerationRequest(clientData.terminalId, clientData.merchantId),\n                        )\n                    }\n            }\n\n    override fun getClientData(): FlutterWaveClientDataEntity = gson.fromJson(\n        sharedPrefsManager.retrieveString(FWKey_CLIENT_DATA_TAG, \"\"),\n        FlutterWaveClientDataEntity::class.java,\n    )\n\n    override fun getKeyHolder(): FWKeyHolder = gson.fromJson(\n        sharedPrefsManager.retrieveString(FWKey_HOLDER_TAG, \"\"),\n        FWKeyHolder::class.java,\n    )\n}\n
===================================================================
diff --git a/app/src/main/java/com/woleapp/netpos/contactless/network/FwRepositoryImpl.kt b/app/src/main/java/com/woleapp/netpos/contactless/network/FwRepositoryImpl.kt
--- a/app/src/main/java/com/woleapp/netpos/contactless/network/FwRepositoryImpl.kt	
+++ b/app/src/main/java/com/woleapp/netpos/contactless/network/FwRepositoryImpl.kt	
@@ -11,6 +11,7 @@
 import com.woleapp.netpos.contactless.util.Mappers.toTransactionResponse
 import io.reactivex.Single
 import retrofit2.Response
+import timber.log.Timber
 import javax.inject.Inject
 import javax.inject.Singleton
 
@@ -56,6 +57,7 @@
     override fun processTransaction(fwTransactionRequest: FWTransactionRequest): Single<TransactionResponse> =
         apiService.processTransaction(fwTransactionRequest)
             .flatMap {
+                Timber.tag("fwTranc").d(gson.toJson(it))
                 Single.just(it.toTransactionResponse())
             }
 
