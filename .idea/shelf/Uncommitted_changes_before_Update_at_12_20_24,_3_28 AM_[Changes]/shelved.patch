Index: app/src/main/java/com/woleapp/netpos/contactless/util/Singletons.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.woleapp.netpos.contactless.util\n\nimport com.danbamitale.epmslib.entities.ConfigData\nimport com.danbamitale.epmslib.entities.KeyHolder\nimport com.danbamitale.epmslib.entities.TransactionResponse\nimport com.google.gson.Gson\nimport com.pixplicity.easyprefs.library.Prefs\nimport com.woleapp.netpos.contactless.model.ConfigurationData\nimport com.woleapp.netpos.contactless.model.NibssResponse\nimport com.woleapp.netpos.contactless.model.User\nimport com.woleapp.netpos.contactless.nibss.Keys\nimport java.lang.Exception\n\nfun useStormTerminalId() = Prefs.getBoolean(PREF_USE_STORM_TERMINAL_ID, true)\nfun TransactionResponse.toNibssResponse(remark: String? = null): NibssResponse =\n    Singletons.gson.fromJson(\n        Singletons.gson.toJson(this),\n        NibssResponse::class.java,\n    ).also {\n        it.responseMessage = try {\n            this.responseMessage\n        } catch (e: Exception) {\n            \"\"\n        }\n        it.additionalAmount = this.additionalAmount_54.toLongOrNull() ?: 0\n        it.localDate = this.localDate_13\n        it.localTime = this.localTime_12\n        it.amount = this.amount.div(100)\n        remark?.let { r ->\n            it.remark = r\n        }\n    }\n\nobject Singletons {\n    fun setUseStormTid(useStormTid: Boolean) =\n        Prefs.putBoolean(PREF_USE_STORM_TERMINAL_ID, useStormTid)\n\n    val gson = Gson()\n    fun getCurrentlyLoggedInUser(): User? =\n        gson.fromJson(Prefs.getString(PREF_USER, \"\"), User::class.java)\n\n    fun getNetPlusPayMid(): String = getCurrentlyLoggedInUser()?.netplusPayMid ?: UtilityParam.STRING_MERCHANT_ID\n\n    fun getSavedConfigurationData(): ConfigurationData {\n        return ConfigurationData(\n            UtilityParam.CONFIGURATION_DATA_IP,\n            UtilityParam.CONFIGURATION_DATA_PORT,\n            Keys.posvasLiveKey1,\n            Keys.posvasLiveKey2,\n        )\n    }\n\n    fun getKeyHolder(): KeyHolder? =\n        gson.fromJson(Prefs.getString(PREF_KEYHOLDER, null), KeyHolder::class.java)\n\n    fun getConfigData(): ConfigData? =\n        gson.fromJson(Prefs.getString(PREF_CONFIG_DATA, null), ConfigData::class.java)\n}\n\nvar TransactionResponse.additionalAmount: Long?\n    get() = 0\n    set(value) {\n    }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/woleapp/netpos/contactless/util/Singletons.kt b/app/src/main/java/com/woleapp/netpos/contactless/util/Singletons.kt
--- a/app/src/main/java/com/woleapp/netpos/contactless/util/Singletons.kt	(revision 91cb6171de577176199744fcee0fcb7c406faad6)
+++ b/app/src/main/java/com/woleapp/netpos/contactless/util/Singletons.kt	(date 1734625977693)
@@ -12,16 +12,18 @@
 import java.lang.Exception
 
 fun useStormTerminalId() = Prefs.getBoolean(PREF_USE_STORM_TERMINAL_ID, true)
+
 fun TransactionResponse.toNibssResponse(remark: String? = null): NibssResponse =
     Singletons.gson.fromJson(
         Singletons.gson.toJson(this),
         NibssResponse::class.java,
     ).also {
-        it.responseMessage = try {
-            this.responseMessage
-        } catch (e: Exception) {
-            ""
-        }
+        it.responseMessage =
+            try {
+                this.responseMessage
+            } catch (e: Exception) {
+                ""
+            }
         it.additionalAmount = this.additionalAmount_54.toLongOrNull() ?: 0
         it.localDate = this.localDate_13
         it.localTime = this.localTime_12
@@ -32,12 +34,11 @@
     }
 
 object Singletons {
-    fun setUseStormTid(useStormTid: Boolean) =
-        Prefs.putBoolean(PREF_USE_STORM_TERMINAL_ID, useStormTid)
+    fun setUseStormTid(useStormTid: Boolean) = Prefs.putBoolean(PREF_USE_STORM_TERMINAL_ID, useStormTid)
 
     val gson = Gson()
-    fun getCurrentlyLoggedInUser(): User? =
-        gson.fromJson(Prefs.getString(PREF_USER, ""), User::class.java)
+
+    fun getCurrentlyLoggedInUser(): User? = gson.fromJson(Prefs.getString(PREF_USER, ""), User::class.java)
 
     fun getNetPlusPayMid(): String = getCurrentlyLoggedInUser()?.netplusPayMid ?: UtilityParam.STRING_MERCHANT_ID
 
@@ -50,11 +51,9 @@
         )
     }
 
-    fun getKeyHolder(): KeyHolder? =
-        gson.fromJson(Prefs.getString(PREF_KEYHOLDER, null), KeyHolder::class.java)
+    fun getKeyHolder(): KeyHolder? = gson.fromJson(Prefs.getString(PREF_KEYHOLDER, null), KeyHolder::class.java)
 
-    fun getConfigData(): ConfigData? =
-        gson.fromJson(Prefs.getString(PREF_CONFIG_DATA, null), ConfigData::class.java)
+    fun getConfigData(): ConfigData? = gson.fromJson(Prefs.getString(PREF_CONFIG_DATA, null), ConfigData::class.java)
 }
 
 var TransactionResponse.additionalAmount: Long?
